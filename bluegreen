#!/bin/bash

# Blue-green deployment script. Usage:
#
#   ./cf-blue-green <appname>

if [[ -z "${DEPLOY_ARGS}" ]]; then
    BLUE=$1
else
    BLUE=$DEPLOY_ARGS
fi


set -e
set -o pipefail

GREEN="${BLUE}-B"
BUILDPACK="https://github.com/cloudfoundry/ruby-buildpack#v1.7.8"

finally ()
{
  # we don't want to keep the sensitive information around
  rm $MANIFEST
  cf logout
}

on_fail () {
  finally
  echo "DEPLOY FAILED - you may need to check 'cf apps' and 'cf routes' and do manual cleanup"
}


cf login -a ${CF_API_ENDPOINT} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o rental -s ${ENVIRONMENT}

set -x

# pull the up-to-date manifest from the BLUE (existing) application
MANIFEST=$(mktemp -t "${BLUE}_manifest.XXXXXXXXXX")
cf create-app-manifest $BLUE -p $MANIFEST

# set up try/catch
# http://stackoverflow.com/a/185900/358804
trap on_fail ERR

DOMAIN=$(cf domains | grep -e '^apps\.homedepot' -e '^apps-np.homedepot' | awk 'NR==1{print $1}')

# create the GREEN application
cf push $GREEN -f $MANIFEST -n $GREEN --no-start -b "$BUILDPACK"

# start the app now that it is fully configured
cf start $GREEN


if ! grep -q "health-check-type: none" $MANIFEST; then
    # ensure it starts if its not a worker
    curl --fail --insecure --head "https://${GREEN}.${DOMAIN}"
fi

# add the GREEN application to each BLUE route to be load-balanced
# TODO this output parsing seems a bit fragile...find a way to use more structured output
cf routes | tail -n +4 | grep $BLUE | awk '{print $3" -n "$2}' | xargs -n 3 cf map-route $GREEN

# cleanup
# TODO consider 'stop'-ing the BLUE instead of deleting it, so that depedencies are cached for next time
cf delete $BLUE -f
cf rename $GREEN $BLUE
cf delete-route $DOMAIN -n $GREEN -f
finally

echo "DONE"